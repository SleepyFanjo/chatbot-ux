{"version":3,"sources":["js/components/ChatBubbleButton.js","js/components/ChatInput.js","js/components/ChatContent.js","js/components/ChatTopBar.js","js/components/ChatBottomBar.js","js/components/ChatWindow.js","js/chatbot.js","js/hooks/useChatInput.js","js/App.js","serviceWorker.js","index.js"],"names":["ChatBubbleButton","_ref","openChat","react_default","a","createElement","onClick","aria-label","className","ChatInput","textarea","message","handleMessageChange","Fragment","ref","placeholder","value","onChange","ChatContent","messages","pushUserMessage","previousType","newRow","map","key","type","concat","content","split","line","lineKey","options","option","text","ChatTopBar","close","ChatBottomBar","sendMessage","toggleFullScreen","fullScreen","botHandler","scenario","user","bot","updateComponent","init","updateFunction","initialState","_this","synchronizeChat","pushMessage","Object","toConsumableArray","handleScenario","userMessage","scenarioFound","find","handleUserMessage","notify","ChatWindow","_useState","useState","_useState2","slicedToArray","setFullscreen","_useState3","_useState4","setMessages","useEffect","useCallback","_useChatInput","onSubmit","setMessage","useRef","messageToSend","current","trim","length","slice","handleKeyboard","e","code","shiftKey","textareaDom","addEventListener","removeEventListener","target","useChatInput","components_ChatBottomBar","fs","components_ChatInput","components_ChatContent","components_ChatTopBar","CenteredLogo","src","App","chatDisplayed","setChatDisplayed","buttonDisplayed","setButtonDisplayed","setTimeout","App_CenteredLogo","TransitionGroup","CSSTransition","timeout","appear","enter","exit","classNames","components_ChatWindow","components_ChatBubbleButton","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAceA,EAZU,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAC1B,OACEC,EAAAC,EAAAC,cAAA,UACEC,QAASJ,EACTK,aAAW,eACXC,UAAU,gDAEVL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAAb,qBCOSC,EAdG,SAAAR,GAAgD,IAA7CS,EAA6CT,EAA7CS,SAAUC,EAAmCV,EAAnCU,QAASC,EAA0BX,EAA1BW,oBACtC,OACET,EAAAC,EAAAC,cAAAF,EAAAC,EAAAS,SAAA,KACEV,EAAAC,EAAAC,cAAA,YACES,IAAKJ,EACLF,UAAU,cACVO,YAAY,qBACZC,MAAOL,EACPM,SAAUL,MC+CHM,EAvDK,SAAAjB,GAAmC,IAAhCkB,EAAgClB,EAAhCkB,SAAUC,EAAsBnB,EAAtBmB,gBAC3BC,EAAe,KACfC,GAAS,EAMb,OACEnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACZW,EAASI,IAAI,SAACZ,EAASa,GAGtB,OAFAF,EAASX,EAAQc,OAASJ,EAC1BA,EAAeV,EAAQc,KAErBtB,EAAAC,EAAAC,cAAA,OACEG,UAAS,iBAAAkB,OAAmBf,EAAQc,KAA3B,KAAAC,OACPJ,EAAS,UAAY,IAEvBE,IAAKA,GAEJF,GAA2B,QAAjBX,EAAQc,KACjBtB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,0BACdL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAAb,YAEA,KACJL,EAAAC,EAAAC,cAAA,YACGM,EAAQgB,QAAQC,MAAM,MAAML,IAAI,SAACM,EAAMC,GAAP,OAC/B3B,EAAAC,EAAAC,cAAA,QAAMmB,IAAKM,GACRA,EAAU,EAAI3B,EAAAC,EAAAC,cAAA,WAAS,KACvBwB,KAGJlB,EAAQoB,SACPpB,EAAQoB,QAAQR,IAAI,SAACS,EAAQR,GAC3B,OACErB,EAAAC,EAAAC,cAAA,UACEmB,IAAKA,EACLlB,QAAS,WAjC7Bc,EAkCsCY,EAlCdhB,SAqCHgB,EAAOC,eCzBjBC,EAjBI,SAAAjC,GAAe,IAAZkC,EAAYlC,EAAZkC,MACpB,OACEhC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBAAgBF,QAAS6B,GACtChC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBAAf,cACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,yBACbL,EAAAC,EAAAC,cAAA,UACEE,aAAW,aACXC,UAAU,sBACVF,QAAS6B,GAEThC,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAAb,aCiBK4B,EA3BO,SAAAnC,GAAmD,IAAhDoC,EAAgDpC,EAAhDoC,YAAaC,EAAmCrC,EAAnCqC,iBAAkBC,EAAiBtC,EAAjBsC,WACtD,OACEpC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACbL,EAAAC,EAAAC,cAAA,UACEE,aAAW,cACXC,UAAU,sBACVF,QAASgC,GAETnC,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBACV+B,EAAa,kBAAoB,gBAIxCpC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,yBACbL,EAAAC,EAAAC,cAAA,UACEE,aAAW,OACXC,UAAU,sBACVF,QAAS+B,GAETlC,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAAb,2BCZJgC,EAAa,qDCTjBrB,SAAW,QACXsB,SAAW,CACT,CACEC,KAAM,KACNC,IAAK,CACHlB,KAAM,MACNE,QAAS,wBACTI,QAAS,CACP,CAAEE,KAAM,aAAcjB,MAAO,0BAC7B,CAAEiB,KAAM,WAAYjB,MAAO,sCAIjC,CACE0B,KAAM,MACNC,IAAK,CACHlB,KAAM,MACNE,QAAS,wBACTI,QAAS,CACP,CAAEE,KAAM,aAAcjB,MAAO,0BAC7B,CAAEiB,KAAM,WAAYjB,MAAO,sCAIjC,CACE0B,KAAM,yBACNC,IAAK,CACHlB,KAAM,MACNE,QAAS,0DAGb,CACEe,KAAM,kCACNC,IAAK,CACHlB,KAAM,MACNE,QAAS,kEAGb,CACEe,KAAM,mCACNC,IAAK,CACHlB,KAAM,MACNE,QACE,6HAGN,CACEe,KAAM,kEACNC,IAAK,CACHlB,KAAM,MACNE,QACE,mRAGN,CACEe,KAAM,iBACNC,IAAK,CACHlB,KAAM,MACNE,QAAS,iCACTI,QAAS,CAAC,CAAEE,KAAM,MAAOjB,MAAO,OAAS,CAAEiB,KAAM,KAAMjB,MAAO,SAGlE,CACE0B,KAAM,KACNC,IAAK,CACHlB,KAAM,MACNE,QAAS,iDACTI,QAAS,CACP,CAAEE,KAAM,IAAKjB,MAAO,UACpB,CAAEiB,KAAM,KAAMjB,MAAO,UACrB,CAAEiB,KAAM,MAAOjB,MAAO,YAI5B,CACE0B,KAAM,SACNC,IAAK,CACHlB,KAAM,MACNE,QAAS,oDAGb,CACEe,KAAM,SACNC,IAAK,CACHlB,KAAM,MACNE,QAAS,oDAGb,CACEe,KAAM,QACNC,IAAK,CACHlB,KAAM,MACNE,QAAS,+CAIfiB,gBAAkB,UAElBC,KAAO,SAACC,EAAgBC,GACtBC,EAAKJ,gBAAkBE,EACvBE,EAAK7B,SAAW4B,EAChBC,EAAKC,wBAGPC,YAAc,SAAAvC,GACZqC,EAAK7B,SAAL,GAAAO,OAAAyB,OAAAC,EAAA,EAAAD,CAAoBH,EAAK7B,UAAzB,CAAmCR,IACnCqC,EAAKC,wBAGPA,gBAAkB,WACZD,EAAKJ,iBACPI,EAAKJ,gBAAgBI,EAAK7B,gBAI9BkC,eAAiB,SAAAC,GACf,IAAIC,EAAgBP,EAAKP,SAASe,KAAK,SAAAf,GACrC,OAAOA,EAASC,OAASY,EAAY3B,UAOvC,OAJI4B,GACFP,EAAKE,YAAYK,EAAcZ,KAG1BY,QAGTE,kBAAoB,SAAAH,GACbN,EAAKK,eAAeC,IACvBN,EAAKE,YAAY,CACfzB,KAAM,MACNE,QACE,0EAGNqB,EAAKC,wBAGPS,OAAS,SAAAJ,GACPN,EAAKE,YAAYI,GACjBN,EAAKS,kBAAkBH,KDtFZK,EA3CI,SAAA1D,GAAe,IAAZkC,EAAYlC,EAAZkC,MAAYyB,EACIC,oBAAS,GADbC,EAAAX,OAAAY,EAAA,EAAAZ,CAAAS,EAAA,GACzBrB,EADyBuB,EAAA,GACbE,EADaF,EAAA,GAAAG,EAEAJ,mBAAS,IAFTK,EAAAf,OAAAY,EAAA,EAAAZ,CAAAc,EAAA,GAEzB9C,EAFyB+C,EAAA,GAEfC,EAFeD,EAAA,GAIhCE,oBAAU,WACR5B,EAAWK,KAAKsB,EAAa,CAC3B,CACE1C,KAAM,MACNE,QACE,gIAGL,IAEH,IAAMP,EAAkBiD,sBAAY,SAAA1D,GAClC6B,EAAWkB,OAAO,CAAEjC,KAAM,OAAQE,QAAShB,KAC1C,IAhB6B2D,EEVN,SAAAC,GAAY,IAAAX,EACRC,mBAAS,IADDC,EAAAX,OAAAY,EAAA,EAAAZ,CAAAS,EAAA,GAC/BjD,EAD+BmD,EAAA,GACtBU,EADsBV,EAAA,GAEhCpD,EAAW+D,iBAAO,MAClBC,EAAgBD,iBAAO9D,GAG7ByD,oBAAU,WACRM,EAAcC,QAAUhE,GACvB,CAACA,IAEJ,IAAM0B,EAAcgC,sBAAY,WAC9BG,EAAW,IACPE,EAAcC,SAAWD,EAAcC,QAAQC,SACe,OAA5DF,EAAcC,QAAQD,EAAcC,QAAQE,OAAS,GACvDN,EAASG,EAAcC,QAAQG,MAAM,GAAI,IAEzCP,EAASG,EAAcC,WAG1B,CAACJ,IAmBJ,OAjBAH,oBAAU,WACR,IAAMW,EAAiB,SAAAC,GACN,UAAXA,EAAEC,OAAmC,IAAfD,EAAEE,UAC1B7C,KAIE8C,EAAczE,EAASiE,QAG7B,OAFAQ,EAAYC,iBAAiB,QAASL,GAE/B,WACLI,EAAYE,oBAAoB,QAASN,KAE1C,CAAC1C,IAIG,CACL3B,WACAC,UACAC,oBAL0B,SAAAoE,GAAC,OAAIR,EAAWQ,EAAEM,OAAOtE,QAMnDqB,eFZ8DkD,CAC9DnE,GADMV,EApBwB4D,EAoBxB5D,SAAUC,EApBc2D,EAoBd3D,QAASC,EApBK0D,EAoBL1D,oBAAqByB,EApBhBiC,EAoBgBjC,YAIhD,OACElC,EAAAC,EAAAC,cAAA,OAAKG,UAAS,iBAAAkB,OAAmBa,EAAa,aAAe,KAC3DpC,EAAAC,EAAAC,cAACmF,EAAD,CACEnD,YAAaA,EACbC,iBAVmB,kBAAM0B,EAAc,SAAAyB,GAAE,OAAKA,KAW9ClD,WAAYA,IAEdpC,EAAAC,EAAAC,cAACqF,EAAD,CACEhF,SAAUA,EACVC,QAASA,EACTC,oBAAqBA,EACrByB,YAAaA,IAEflC,EAAAC,EAAAC,cAACsF,EAAD,CAAaxE,SAAUA,EAAUC,gBAAiBA,IAClDjB,EAAAC,EAAAC,cAACuF,EAAD,CAAYzD,MAAOA,MG3CnB0D,EAAe,WACnB,OACE1F,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,OAAKyF,IAAI,yHACT3F,EAAAC,EAAAC,cAAA,gCA6DS0F,EAxDH,WAAM,IAAAnC,EAC0BC,oBAAS,GADnCC,EAAAX,OAAAY,EAAA,EAAAZ,CAAAS,EAAA,GACToC,EADSlC,EAAA,GACMmC,EADNnC,EAAA,GAAAG,EAE8BJ,oBAAS,GAFvCK,EAAAf,OAAAY,EAAA,EAAAZ,CAAAc,EAAA,GAETiC,EAFShC,EAAA,GAEQiC,EAFRjC,EAAA,GAqBhB,OARAE,oBAAU,YACgB,IAApB8B,GACFE,WAAW,WACTH,GAAiB,IAChB,MAEJ,CAACC,IAGF/F,EAAAC,EAAAC,cAAAF,EAAAC,EAAAS,SAAA,KACEV,EAAAC,EAAAC,cAACgG,EAAD,MACAlG,EAAAC,EAAAC,cAACiG,EAAA,EAAD,KACGN,EACC7F,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CACE/E,IAAI,SACJgF,QAAS,CACPC,OAAQ,IACRC,MAAO,IACPC,KAAM,GAERC,WAAW,oBAEXzG,EAAAC,EAAAC,cAACwG,EAAD,CAAY1E,MA/BJ,WAChB8D,GAAiB,GACjBE,GAAmB,OA+BX,KACHD,EACC/F,EAAAC,EAAAC,cAACkG,EAAA,EAAD,CACE/E,IAAI,SACJgF,QAAS,CACPC,OAAQ,EACRC,MAAO,EACPC,KAAM,KAERC,WAAW,0BAEXzG,EAAAC,EAAAC,cAACyG,EAAD,CAAkB5G,SAvCX,WACfiG,GAAmB,OAwCX,QCtDQY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlH,EAAAC,EAAAC,cAACiH,EAAD,MAASC,SAASC,eAAe,cD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7d7ecdb1.chunk.js","sourcesContent":["import React from 'react'\n\nconst ChatBubbleButton = ({ openChat }) => {\n  return (\n    <button\n      onClick={openChat}\n      aria-label=\"Open Chatbot\"\n      className=\"ChatBubble--wrapper mdc-elevation-transition\"\n    >\n      <i className=\"material-icons\">question_answer</i>\n    </button>\n  )\n}\n\nexport default ChatBubbleButton\n","import React from 'react'\n\nconst ChatInput = ({ textarea, message, handleMessageChange }) => {\n  return (\n    <>\n      <textarea\n        ref={textarea}\n        className=\"Chat--input\"\n        placeholder=\"Write a message...\"\n        value={message}\n        onChange={handleMessageChange}\n      />\n    </>\n  )\n}\n\nexport default ChatInput\n","import React from 'react'\n\nconst ChatContent = ({ messages, pushUserMessage }) => {\n  let previousType = null\n  let newRow = true\n\n  const sendUserMessage = message => {\n    pushUserMessage(message.value)\n  }\n\n  return (\n    <div className=\"Chat--content\">\n      <div className=\"Chat--messages\">\n        {messages.map((message, key) => {\n          newRow = message.type !== previousType\n          previousType = message.type\n          return (\n            <div\n              className={`Chat--message ${message.type} ${\n                newRow ? 'new-row' : ''\n              }`}\n              key={key}\n            >\n              {newRow && message.type === 'bot' ? (\n                <span className=\"Chat--message-portrait\">\n                  <i className=\"material-icons\">android</i>\n                </span>\n              ) : null}\n              <span>\n                {message.content.split('\\n').map((line, lineKey) => (\n                  <span key={lineKey}>\n                    {lineKey > 0 ? <br /> : null}\n                    {line}\n                  </span>\n                ))}\n                {message.options &&\n                  message.options.map((option, key) => {\n                    return (\n                      <button\n                        key={key}\n                        onClick={() => {\n                          sendUserMessage(option)\n                        }}\n                      >\n                        {option.text}\n                      </button>\n                    )\n                  })}\n              </span>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default ChatContent\n","import React from 'react'\n\nconst ChatTopBar = ({ close }) => {\n  return (\n    <div className=\"Chat--top-bar\" onClick={close}>\n      <div className=\"Chat--top-bar-title\">Chatbot...</div>\n      <div className=\"Chat--top-bar-actions\">\n        <button\n          aria-label=\"Close chat\"\n          className=\"Chat--top-bar-close\"\n          onClick={close}\n        >\n          <i className=\"material-icons\">close</i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default ChatTopBar\n","import React from 'react'\n\nconst ChatBottomBar = ({ sendMessage, toggleFullScreen, fullScreen }) => {\n  return (\n    <div className=\"Chat--bottom-bar\">\n      <div className=\"Chat-bottom-bar left\">\n        <button\n          aria-label=\"Full screen\"\n          className=\"Chat--bottom-button\"\n          onClick={toggleFullScreen}\n        >\n          <i className=\"material-icons\">\n            {fullScreen ? 'fullscreen_exit' : 'fullscreen'}\n          </i>\n        </button>\n      </div>\n      <div className=\"Chat-bottom-bar right\">\n        <button\n          aria-label=\"Send\"\n          className=\"Chat--bottom-button\"\n          onClick={sendMessage}\n        >\n          <i className=\"material-icons\">send</i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default ChatBottomBar\n","import React, { useState, useCallback, useEffect } from 'react'\nimport ChatInput from './ChatInput'\nimport ChatContent from './ChatContent'\nimport ChatTopBar from './ChatTopBar'\nimport ChatBottomBar from './ChatBottomBar'\n\nimport { useChatInput } from '../hooks/useChatInput'\n\nimport BotHandler from '../chatbot'\n\nconst botHandler = new BotHandler()\n\nconst ChatWindow = ({ close }) => {\n  const [fullScreen, setFullscreen] = useState(false)\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    botHandler.init(setMessages, [\n      {\n        type: 'bot',\n        content:\n          \"Hi! I'm Amy, your personal job assistant today. I'm here to answer your questions about Pictet in your preferred language\"\n      }\n    ])\n  }, [])\n\n  const pushUserMessage = useCallback(message => {\n    botHandler.notify({ type: 'user', content: message })\n  }, [])\n\n  const toggleFullScreen = () => setFullscreen(fs => !fs)\n\n  const { textarea, message, handleMessageChange, sendMessage } = useChatInput(\n    pushUserMessage\n  )\n\n  return (\n    <div className={`Chat--wrapper ${fullScreen ? 'fullscreen' : ''}`}>\n      <ChatBottomBar\n        sendMessage={sendMessage}\n        toggleFullScreen={toggleFullScreen}\n        fullScreen={fullScreen}\n      />\n      <ChatInput\n        textarea={textarea}\n        message={message}\n        handleMessageChange={handleMessageChange}\n        sendMessage={sendMessage}\n      />\n      <ChatContent messages={messages} pushUserMessage={pushUserMessage} />\n      <ChatTopBar close={close} />\n    </div>\n  )\n}\n\nexport default ChatWindow\n","class Chatbot {\n  messages = []\n  scenario = [\n    {\n      user: 'Hi',\n      bot: {\n        type: 'bot',\n        content: 'How may I assist you?',\n        options: [\n          { text: 'Job search', value: 'I am looking for a job' },\n          { text: 'About us', value: \"I'd like to know more about you\" }\n        ]\n      }\n    },\n    {\n      user: 'Yes',\n      bot: {\n        type: 'bot',\n        content: 'How may I assist you?',\n        options: [\n          { text: 'Job search', value: 'I am looking for a job' },\n          { text: 'About us', value: \"I'd like to know more about you\" }\n        ]\n      }\n    },\n    {\n      user: 'I am looking for a job',\n      bot: {\n        type: 'bot',\n        content: 'Sure, I can help here. How would you like to proceed?'\n      }\n    },\n    {\n      user: \"I'd like to know more about you\",\n      bot: {\n        type: 'bot',\n        content: 'We are working on a good presentation for you, come back soon'\n      }\n    },\n    {\n      user: 'What is the recruitment process?',\n      bot: {\n        type: 'bot',\n        content:\n          'To be considered for a position at Pictet, it is required that you complete the online application, here is the link ...'\n      }\n    },\n    {\n      user: 'Great thanks. By the way do you know how long it takes usually?',\n      bot: {\n        type: 'bot',\n        content:\n          'Times can vary on hearing back from Pictet as timing can depend on the amount of candidates we receive for the role. We ensure we consider all viable candidates so we ask for your patience. You will receive a communication once they move to the next step in the process.'\n      }\n    },\n    {\n      user: 'Ok thanks Amy!',\n      bot: {\n        type: 'bot',\n        content: 'Do you have any other question',\n        options: [{ text: 'Yes', value: 'Yes' }, { text: 'No', value: 'No' }]\n      }\n    },\n    {\n      user: 'No',\n      bot: {\n        type: 'bot',\n        content: 'May I ask you how was your experience with me?',\n        options: [\n          { text: '*', value: 'Medium' },\n          { text: '**', value: 'Decent' },\n          { text: '***', value: 'Bliss' }\n        ]\n      }\n    },\n    {\n      user: 'Medium',\n      bot: {\n        type: 'bot',\n        content: 'Thank you for letting me know! Have a nice day!'\n      }\n    },\n    {\n      user: 'Decent',\n      bot: {\n        type: 'bot',\n        content: 'Thank you for letting me know! Have a nice day!'\n      }\n    },\n    {\n      user: 'Bliss',\n      bot: {\n        type: 'bot',\n        content: \"I'm glad it helped! Have a nice day!\"\n      }\n    }\n  ]\n  updateComponent = null\n\n  init = (updateFunction, initialState) => {\n    this.updateComponent = updateFunction\n    this.messages = initialState\n    this.synchronizeChat()\n  }\n\n  pushMessage = message => {\n    this.messages = [...this.messages, message]\n    this.synchronizeChat()\n  }\n\n  synchronizeChat = () => {\n    if (this.updateComponent) {\n      this.updateComponent(this.messages)\n    }\n  }\n\n  handleScenario = userMessage => {\n    let scenarioFound = this.scenario.find(scenario => {\n      return scenario.user === userMessage.content\n    })\n\n    if (scenarioFound) {\n      this.pushMessage(scenarioFound.bot)\n    }\n\n    return scenarioFound\n  }\n\n  handleUserMessage = userMessage => {\n    if (!this.handleScenario(userMessage)) {\n      this.pushMessage({\n        type: 'bot',\n        content:\n          \"Sorry I can't handle this request yet, can I help on something else ?\"\n      })\n    }\n    this.synchronizeChat()\n  }\n\n  notify = userMessage => {\n    this.pushMessage(userMessage)\n    this.handleUserMessage(userMessage)\n  }\n}\n\nexport default Chatbot\n","import { useState, useRef, useEffect, useCallback } from 'react'\n\nexport const useChatInput = onSubmit => {\n  const [message, setMessage] = useState('')\n  const textarea = useRef(null)\n  const messageToSend = useRef(message)\n\n  // Store message in a ref to avoid re run the keyboard effect everytime the message changes\n  useEffect(() => {\n    messageToSend.current = message\n  }, [message])\n\n  const sendMessage = useCallback(() => {\n    setMessage('')\n    if (messageToSend.current && messageToSend.current.trim()) {\n      if (messageToSend.current[messageToSend.current.length - 1] === '\\n') {\n        onSubmit(messageToSend.current.slice(0, -1))\n      } else {\n        onSubmit(messageToSend.current)\n      }\n    }\n  }, [onSubmit])\n\n  useEffect(() => {\n    const handleKeyboard = e => {\n      if (e.code === 'Enter' && e.shiftKey === false) {\n        sendMessage()\n      }\n    }\n\n    const textareaDom = textarea.current\n    textareaDom.addEventListener('keyup', handleKeyboard)\n\n    return () => {\n      textareaDom.removeEventListener('keyup', handleKeyboard)\n    }\n  }, [sendMessage])\n\n  const handleMessageChange = e => setMessage(e.target.value)\n\n  return {\n    textarea,\n    message,\n    handleMessageChange,\n    sendMessage\n  }\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nimport ChatBubbleButton from './components/ChatBubbleButton'\nimport ChatWindow from './components/ChatWindow'\n\nconst CenteredLogo = () => {\n  return (\n    <div className=\"Centered__logo\">\n      <img src=\"http://image.pictetassetmanagement-email.com/lib/fe381570756405797c1173/m/1/d1dde271-12cb-4c3d-82ab-aeb75e4776a7.png\" />\n      <span>Pictet Careers</span>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [chatDisplayed, setChatDisplayed] = useState(false)\n  const [buttonDisplayed, setButtonDisplayed] = useState(true)\n\n  const closeChat = () => {\n    setChatDisplayed(false)\n    setButtonDisplayed(true)\n  }\n\n  const openChat = () => {\n    setButtonDisplayed(false)\n  }\n\n  useEffect(() => {\n    if (buttonDisplayed === false) {\n      setTimeout(() => {\n        setChatDisplayed(true)\n      }, 280)\n    }\n  }, [buttonDisplayed])\n\n  return (\n    <>\n      <CenteredLogo />\n      <TransitionGroup>\n        {chatDisplayed ? (\n          <CSSTransition\n            key=\"window\"\n            timeout={{\n              appear: 280,\n              enter: 280,\n              exit: 0\n            }}\n            classNames=\"Chat--transition\"\n          >\n            <ChatWindow close={closeChat} />\n          </CSSTransition>\n        ) : null}\n        {buttonDisplayed ? (\n          <CSSTransition\n            key=\"bubble\"\n            timeout={{\n              appear: 0,\n              enter: 0,\n              exit: 280\n            }}\n            classNames=\"ChatBubble--transition\"\n          >\n            <ChatBubbleButton openChat={openChat} />\n          </CSSTransition>\n        ) : null}\n      </TransitionGroup>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'sass/index.scss'\nimport App from 'js/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('react-app'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}