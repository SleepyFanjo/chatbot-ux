{"version":3,"sources":["js/components/ChatBubbleButton.js","js/components/ChatInput.js","js/components/ChatContent.js","js/components/ChatTopBar.js","js/components/ChatWindow.js","js/App.js","serviceWorker.js","index.js"],"names":["ChatBubbleButton","_ref","openChat","react_default","a","createElement","onClick","aria-label","className","ChatInput","onSubmit","_useState","useState","_useState2","Object","slicedToArray","message","setMessage","textarea","useRef","messageToSend","useEffect","current","sendMessage","useCallback","trim","console","log","handleKeyboard","e","code","shiftKey","textareaDom","addEventListener","removeEventListener","Fragment","ref","placeholder","value","onChange","target","ChatContent","messages","map","key","concat","type","content","split","line","lineKey","ChatTopBar","close","ChatWindow","setMessages","pushUserMessage","existingMessages","toConsumableArray","components_ChatInput","components_ChatContent","components_ChatTopBar","App","chatDisplayed","setChatDisplayed","_useState3","_useState4","buttonDisplayed","setButtonDisplayed","setTimeout","TransitionGroup","CSSTransition","timeout","appear","enter","exit","classNames","components_ChatWindow","components_ChatBubbleButton","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c27699bd.chunk.js","sourcesContent":["import React from 'react'\n\nconst ChatBubbleButton = ({ openChat }) => {\n  return (\n    <button\n      onClick={openChat}\n      aria-label=\"Open Chatbot\"\n      className=\"ChatBubble--wrapper mdc-elevation-transition\"\n    >\n      <i className=\"material-icons\">question_answer</i>\n    </button>\n  )\n}\n\nexport default ChatBubbleButton\n","import React, { useState, useRef, useEffect, useCallback } from 'react'\n\nconst ChatInput = ({ onSubmit }) => {\n  const [message, setMessage] = useState('')\n  const textarea = useRef(null)\n  const messageToSend = useRef(message)\n\n  // Store message in a ref to avoid re run the keyboard effect everytime the message changes\n  useEffect(() => {\n    messageToSend.current = message\n  }, [message])\n\n  const sendMessage = useCallback(() => {\n    setMessage('')\n    if (messageToSend.current && messageToSend.current.trim()) {\n      onSubmit(messageToSend.current)\n    }\n  }, [onSubmit])\n\n  useEffect(() => {\n    console.log('expensive effect run')\n    const handleKeyboard = e => {\n      if (e.code === 'Enter' && e.shiftKey === false) {\n        sendMessage()\n      }\n    }\n\n    const textareaDom = textarea.current\n    textareaDom.addEventListener('keyup', handleKeyboard)\n\n    return () => {\n      console.log('expensive effect clean')\n      textareaDom.removeEventListener('keyup', handleKeyboard)\n    }\n  }, [sendMessage])\n\n  const handleMessageChange = e => setMessage(e.target.value)\n\n  return (\n    <>\n      <textarea\n        ref={textarea}\n        className=\"Chat--input\"\n        placeholder=\"Write a message...\"\n        value={message}\n        onChange={handleMessageChange}\n      />\n      <button aria-label=\"Send\" className=\"Chat--send-button\" onClick={sendMessage}>\n        <i className=\"material-icons\">send</i>\n      </button>\n    </>\n  )\n}\n\nexport default ChatInput\n","import React from 'react'\n\nconst ChatContent = ({ messages }) => {\n  return (\n    <div className=\"Chat--content\">\n      <div className=\"Chat--messages\">\n        {messages.map((message, key) => (\n          <div className={`Chat--message ${message.type}`} key={key}>\n            <span>\n              {message.content.split('\\n').map((line, lineKey) => (\n                <span key={lineKey}>\n                  {lineKey > 0 ? <br /> : null}\n                  {line}\n                </span>\n              ))}\n            </span>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default ChatContent\n","import React from 'react'\n\nconst ChatTopBar = ({ close }) => {\n  return (\n    <div className=\"Chat--top-bar\" onClick={close}>\n      <div className=\"Chat--top-bar-title\">Chatbot...</div>\n      <div className=\"Chat--top-bar-actions\">\n        <button\n          aria-label=\"Close chat\"\n          className=\"Chat--top-bar-close\"\n          onClick={close}\n        >\n          <i className=\"material-icons\">close</i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default ChatTopBar\n","import React, { useState, useCallback } from 'react'\nimport ChatInput from './ChatInput'\nimport ChatContent from './ChatContent'\nimport ChatTopBar from './ChatTopBar'\n\nconst ChatWindow = ({ close }) => {\n  const [messages, setMessages] = useState([\n    { type: 'bot', content: 'Hello, how can I help ?' }\n  ])\n\n  const pushUserMessage = useCallback(message => {\n    setMessages(existingMessages => [\n      ...existingMessages,\n      { type: 'user', content: message },\n      { type: 'bot', content: 'Here will be some content from the API' }\n    ])\n  }, [])\n\n  return (\n    <div className=\"Chat--wrapper\">\n      <div className=\"Chat--bottom-bar\" />\n      <ChatInput onSubmit={pushUserMessage} />\n      <ChatContent messages={messages} />\n      <ChatTopBar close={close} />\n    </div>\n  )\n}\n\nexport default ChatWindow\n","import React, { useState, useEffect } from 'react'\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nimport ChatBubbleButton from './components/ChatBubbleButton'\nimport ChatWindow from './components/ChatWindow'\n\nconst App = () => {\n  const [chatDisplayed, setChatDisplayed] = useState(false)\n  const [buttonDisplayed, setButtonDisplayed] = useState(true)\n\n  const closeChat = () => {\n    setChatDisplayed(false)\n    setButtonDisplayed(true)\n  }\n\n  const openChat = () => {\n    setButtonDisplayed(false)\n  }\n\n  useEffect(() => {\n    if (buttonDisplayed === false) {\n      setTimeout(() => {\n        setChatDisplayed(true)\n      }, 280)\n    }\n  }, [buttonDisplayed])\n\n  return (\n    <TransitionGroup>\n      {chatDisplayed ? (\n        <CSSTransition\n          key=\"window\"\n          timeout={{\n            appear: 280,\n            enter: 280,\n            exit: 0\n          }}\n          classNames=\"Chat--transition\"\n        >\n          <ChatWindow close={closeChat} />\n        </CSSTransition>\n      ) : null}\n      {buttonDisplayed ? (\n        <CSSTransition\n          key=\"bubble\"\n          timeout={{\n            appear: 0,\n            enter: 0,\n            exit: 280\n          }}\n          classNames=\"ChatBubble--transition\"\n        >\n          <ChatBubbleButton openChat={openChat} />\n        </CSSTransition>\n      ) : null}\n    </TransitionGroup>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'sass/index.scss'\nimport App from 'js/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('react-app'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}