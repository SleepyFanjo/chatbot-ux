{"version":3,"sources":["js/components/ChatBubbleButton.js","js/components/ChatInput.js","js/components/ChatContent.js","js/components/ChatTopBar.js","js/components/ChatBottomBar.js","js/components/ChatWindow.js","js/hooks/useChatInput.js","js/App.js","serviceWorker.js","index.js"],"names":["ChatBubbleButton","_ref","openChat","react_default","a","createElement","onClick","aria-label","className","ChatInput","textarea","message","handleMessageChange","Fragment","ref","placeholder","value","onChange","ChatContent","messages","previousType","newRow","map","key","type","concat","content","split","line","lineKey","ChatTopBar","close","ChatBottomBar","sendMessage","toggleFullScreen","fullScreen","ChatWindow","_useState","useState","_useState2","Object","slicedToArray","setFullscreen","_useState3","_useState4","setMessages","_useChatInput","onSubmit","setMessage","useRef","messageToSend","useEffect","current","useCallback","trim","console","log","handleKeyboard","e","code","shiftKey","textareaDom","addEventListener","removeEventListener","target","useChatInput","messagesToPush","Math","random","push","existingMessages","toConsumableArray","components_ChatBottomBar","fs","components_ChatInput","components_ChatContent","components_ChatTopBar","App","chatDisplayed","setChatDisplayed","buttonDisplayed","setButtonDisplayed","setTimeout","TransitionGroup","CSSTransition","timeout","appear","enter","exit","classNames","components_ChatWindow","components_ChatBubbleButton","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa4c3d72.chunk.js","sourcesContent":["import React from 'react'\n\nconst ChatBubbleButton = ({ openChat }) => {\n  return (\n    <button\n      onClick={openChat}\n      aria-label=\"Open Chatbot\"\n      className=\"ChatBubble--wrapper mdc-elevation-transition\"\n    >\n      <i className=\"material-icons\">question_answer</i>\n    </button>\n  )\n}\n\nexport default ChatBubbleButton\n","import React from 'react'\n\nconst ChatInput = ({ textarea, message, handleMessageChange }) => {\n  return (\n    <>\n      <textarea\n        ref={textarea}\n        className=\"Chat--input\"\n        placeholder=\"Write a message...\"\n        value={message}\n        onChange={handleMessageChange}\n      />\n    </>\n  )\n}\n\nexport default ChatInput\n","import React from 'react'\n\nconst ChatContent = ({ messages }) => {\n  let previousType = null\n  let newRow = true\n  return (\n    <div className=\"Chat--content\">\n      <div className=\"Chat--messages\">\n        {messages.map((message, key) => {\n          newRow = message.type !== previousType\n          previousType = message.type\n          return (\n            <div\n              className={`Chat--message ${message.type} ${\n                newRow ? 'new-row' : ''\n              }`}\n              key={key}\n            >\n              {newRow && message.type === 'bot' ? (\n                <span className=\"Chat--message-portrait\">\n                  <i className=\"material-icons\">android</i>\n                </span>\n              ) : null}\n              <span>\n                {message.content.split('\\n').map((line, lineKey) => (\n                  <span key={lineKey}>\n                    {lineKey > 0 ? <br /> : null}\n                    {line}\n                  </span>\n                ))}\n              </span>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default ChatContent\n","import React from 'react'\n\nconst ChatTopBar = ({ close }) => {\n  return (\n    <div className=\"Chat--top-bar\" onClick={close}>\n      <div className=\"Chat--top-bar-title\">Chatbot...</div>\n      <div className=\"Chat--top-bar-actions\">\n        <button\n          aria-label=\"Close chat\"\n          className=\"Chat--top-bar-close\"\n          onClick={close}\n        >\n          <i className=\"material-icons\">close</i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default ChatTopBar\n","import React from 'react'\n\nconst ChatBottomBar = ({ sendMessage, toggleFullScreen, fullScreen }) => {\n  return (\n    <div className=\"Chat--bottom-bar\">\n      <div className=\"Chat-bottom-bar left\">\n        <button\n          aria-label=\"Full screen\"\n          className=\"Chat--bottom-button\"\n          onClick={toggleFullScreen}\n        >\n          <i className=\"material-icons\">\n            {fullScreen ? 'fullscreen_exit' : 'fullscreen'}\n          </i>\n        </button>\n      </div>\n      <div className=\"Chat-bottom-bar right\">\n        <button\n          aria-label=\"Send\"\n          className=\"Chat--bottom-button\"\n          onClick={sendMessage}\n        >\n          <i className=\"material-icons\">send</i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default ChatBottomBar\n","import React, { useState, useCallback } from 'react'\nimport ChatInput from './ChatInput'\nimport ChatContent from './ChatContent'\nimport ChatTopBar from './ChatTopBar'\nimport ChatBottomBar from './ChatBottomBar'\n\nimport { useChatInput } from '../hooks/useChatInput'\n\nconst ChatWindow = ({ close }) => {\n  const [fullScreen, setFullscreen] = useState(false)\n  const [messages, setMessages] = useState([\n    { type: 'bot', content: 'Hello, how can I help ?' }\n  ])\n\n  const pushUserMessage = useCallback(message => {\n    let messagesToPush = [{ type: 'user', content: message }]\n    if (Math.random() > 0.5) {\n      messagesToPush.push({\n        type: 'bot',\n        content: 'Here will be some content from the API'\n      })\n    }\n\n    setMessages(existingMessages => [...existingMessages, ...messagesToPush])\n  }, [])\n\n  const toggleFullScreen = () => setFullscreen(fs => !fs)\n\n  const { textarea, message, handleMessageChange, sendMessage } = useChatInput(\n    pushUserMessage\n  )\n\n  return (\n    <div className={`Chat--wrapper ${fullScreen ? 'fullscreen' : ''}`}>\n      <ChatBottomBar\n        sendMessage={sendMessage}\n        toggleFullScreen={toggleFullScreen}\n        fullScreen={fullScreen}\n      />\n      <ChatInput\n        textarea={textarea}\n        message={message}\n        handleMessageChange={handleMessageChange}\n        sendMessage={sendMessage}\n      />\n      <ChatContent messages={messages} />\n      <ChatTopBar close={close} />\n    </div>\n  )\n}\n\nexport default ChatWindow\n","import { useState, useRef, useEffect, useCallback } from 'react'\n\nexport const useChatInput = onSubmit => {\n  const [message, setMessage] = useState('')\n  const textarea = useRef(null)\n  const messageToSend = useRef(message)\n\n  // Store message in a ref to avoid re run the keyboard effect everytime the message changes\n  useEffect(() => {\n    messageToSend.current = message\n  }, [message])\n\n  const sendMessage = useCallback(() => {\n    setMessage('')\n    if (messageToSend.current && messageToSend.current.trim()) {\n      onSubmit(messageToSend.current)\n    }\n  }, [onSubmit])\n\n  useEffect(() => {\n    console.log('expensive effect run')\n    const handleKeyboard = e => {\n      if (e.code === 'Enter' && e.shiftKey === false) {\n        sendMessage()\n      }\n    }\n\n    const textareaDom = textarea.current\n    textareaDom.addEventListener('keyup', handleKeyboard)\n\n    return () => {\n      console.log('expensive effect clean')\n      textareaDom.removeEventListener('keyup', handleKeyboard)\n    }\n  }, [sendMessage])\n\n  const handleMessageChange = e => setMessage(e.target.value)\n\n  return {\n    textarea,\n    message,\n    handleMessageChange,\n    sendMessage\n  }\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\n\nimport ChatBubbleButton from './components/ChatBubbleButton'\nimport ChatWindow from './components/ChatWindow'\n\nconst App = () => {\n  const [chatDisplayed, setChatDisplayed] = useState(false)\n  const [buttonDisplayed, setButtonDisplayed] = useState(true)\n\n  const closeChat = () => {\n    setChatDisplayed(false)\n    setButtonDisplayed(true)\n  }\n\n  const openChat = () => {\n    setButtonDisplayed(false)\n  }\n\n  useEffect(() => {\n    if (buttonDisplayed === false) {\n      setTimeout(() => {\n        setChatDisplayed(true)\n      }, 280)\n    }\n  }, [buttonDisplayed])\n\n  return (\n    <TransitionGroup>\n      {chatDisplayed ? (\n        <CSSTransition\n          key=\"window\"\n          timeout={{\n            appear: 280,\n            enter: 280,\n            exit: 0\n          }}\n          classNames=\"Chat--transition\"\n        >\n          <ChatWindow close={closeChat} />\n        </CSSTransition>\n      ) : null}\n      {buttonDisplayed ? (\n        <CSSTransition\n          key=\"bubble\"\n          timeout={{\n            appear: 0,\n            enter: 0,\n            exit: 280\n          }}\n          classNames=\"ChatBubble--transition\"\n        >\n          <ChatBubbleButton openChat={openChat} />\n        </CSSTransition>\n      ) : null}\n    </TransitionGroup>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'sass/index.scss'\nimport App from 'js/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('react-app'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}